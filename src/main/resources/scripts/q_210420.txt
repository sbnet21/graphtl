# options;
option typecheck on;
option prunetypecheck on;
option prunequery off;
# init;
# prepare from "data";
connect lb;
drop TEST1;
create graph TEST1;
use TEST1;
# schema;
create node A;
create node B;
create node C;
create node S;
create edge X (A -> B);
create edge X (B -> C);
create edge X (A -> S);
# data
insert N (1,"A");
insert N (2,"B");
insert N (3,"C");
insert E (101,1,2,"X");
insert E (102,2,3,"X");


# constraints (EGDs);
add constraint N(b,"B"),N(c1,l1),N(c2,l2),E(e1,b,c1,l3),E(e2,b,c2,l4) -> c1=c2, l1=l2, e1=e2, l3=l4;
add constraint N(c,"C"),N(b1,l1),N(b2,l2),E(e1,b1,c,l3),E(e2,b2,c,l4) -> b1=b2, l1=l2, e1=e2, l3=l4;
# import data from CSV;
import N from "/home/sbnet21/src/workspace/graph-trans/data/SYN_n.csv";
import E from "/home/sbnet21/src/workspace/graph-trans/data/SYN_e.csv";
# views;
#create materialized view v0 as {match a:A-e1:X->b:B, b-e2:X->c:C map (b,c) to s:S};
create virtual view v0 as {match a:A-e1:X->b:B, b-e2:X->c:C map (b,c) to s:S};

#create ssindex on v0;

#match s:S from v0 return s;
#match a:A-e:X->s:S from v0 return s-e->s;
#match a:A-e:X->b:B from v0 return a-e->b;
match s1:S-e:X->s2:S from v0 return s1-e->s2;
 

#create index on v0;
#drop SYN;
#program;

#disconnect;